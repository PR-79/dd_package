incorporate weights into the getIsomorphismPauli procedure
	Use a cached weight in getHighLabelPauli
	in normalizeLIMDDPauli, allocate a cached weight, weightInv that highLabel can use,
		so that highLabelPauli doesn't need to receive the whole complexTable 

Add a parameter to the dd stating the group, 'Z', 'Pauli', 'QMDD' / 'trivial'
	refactor the group to enum LIMDD_group type

incorporate weights into getAutomorphismGroup
	Write algorithm on paper

checkout testSimpleCliffordCircuit_1,2,3 in other branches to see if I've merged correctly

getLIMDDFromVector() turn a ket-vector into a LIMDD
use some tests to test whether the isomorphism-finding machinery works:
vector := [ ... [
iso := xyziy
transformedVector := iso * vector
LIMDD a := getLIMDDFromVector(vector)
LIMDD b := getLIMDDFromVector(vector)
isoFound := getIsomorphism(a, b)
if isValidIsomorphism(a, b, isoFound) party else error

in tests, call isIsomorphism instead of defining a handwritten isomorphism

make 10 simulation tests

Log
	output debugging statements to the Log instead of to std::cout
	ability to turn the log on and off



****    DONE    ****

Ask Linz to help design the division and multiplications that are needed

fix test createnode9
	error has to do with getbit. what is going wrong?
fix test createnode11

Update getVectorLIMDD to reflect the X, and Y gates
write isValidIsomorphismBruteForce(edge, edge, lim), which outputs 'true' iff the given lim is an isomorphism between edge and edge

pass all PauliIsomorphism tests

Make a class "LimWeight" which contains (i) LimEntry; (ii) Complex
Output of getIsomorphismPauli is a struct called "LimWeight" with fields LimEntry, Complex
